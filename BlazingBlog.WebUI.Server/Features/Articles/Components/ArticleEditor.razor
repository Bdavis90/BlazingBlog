@page "/article-editor"
@page "/article-editor/{ArticleId:int}"
@using BlazingBlogApplication.Articles.DeleteArticle
@inject ISender Sender
@inject NavigationManager NavigationManager;

@if (IsEditMode && Article is not null)
{
    <PageTitle>Edit Article: @Article.Title</PageTitle>
    <h3>Edit Article: @Article.Title</h3>
}
else
{
    <PageTitle>Create New Article</PageTitle>
    <h3>Create New Article</h3>

}

@if (Article is not null)
{
    <EditForm FormName="ArticleEditorForm" Model="Article" OnSubmit="HandleSubmit">
        <InputText class="form-control" @bind-Value="Article.Title"></InputText>
        <InputTextArea class="form-control" @bind-Value="Article.Content"></InputTextArea>
        <InputDate class="form-control" @bind-Value="Article.DatePublished"></InputDate>
        <div class="form-check">
            <InputCheckbox class="form-check-input" @bind-Value="Article.IsPublished"></InputCheckbox>
            <label class="form-check-label">Is Published</label>
        </div>

        <button class="btn btn-primary" type="submit">Submit</button>
    </EditForm>

    if (ArticleId is not null)
    {
        <p>
            <form @onsubmit="DeleteArticle" @formname="DeleteArticleForm" method="post">
                <button class="btn btn-danger">Delete Article</button>
                <AntiforgeryToken />
            </form>

        </p>

    }

}

<span class="text-danger">@errorMessage</span>

@code {
    private bool IsEditMode => ArticleId != null;
    private string errorMessage = string.Empty;
    [SupplyParameterFromForm]
    public ArticleModel? Article { get; set; }
    [Parameter]
    public int? ArticleId { get; set; }

    protected override async Task OnParametersSetAsync()
    {

        if (ArticleId is not null)
        {
            var result = await Sender.Send(new GetArticleByIdQuery { Id = (int)ArticleId });
            if (result.Success)
            {
                Article ??= ((ArticleResponse?)result).Adapt<ArticleModel>();
                Article.Id = (int)ArticleId;
            }
            else
            {
                SetErrorMessage(result.Error);
            }
        }
        else
        {
            Article ??= new();
        }

    }

    private async Task HandleSubmit()
    {
        if (IsEditMode)
        {
            var command = Article.Adapt<UpdateArticleCommand>();
            var result = await Sender.Send(command);
            if (result.Success)
            {
                Article = result.Value.Adapt<ArticleModel>();
            }
            else
            {
                SetErrorMessage(result.Error);
            }
        }
        else
        {
            var command = Article.Adapt<CreateArticleCommand>();
            var result = await Sender.Send(command);
            //Article = result.Adapt<ArticleModel>();
            if (result.Success)
            {
                NavigationManager.NavigateTo($"/article-editor/{result?.Value?.Id}");
            } else
            {
                SetErrorMessage(result.Error);
            }

        }
    }

    private async Task DeleteArticle()
    {
        if (ArticleId is null)
        {
            return;
        }

        var command = new DeleteArticleCommand { Id = (int)ArticleId };
        var result = await Sender.Send(command);

        if (result.Success)
        {
            NavigationManager.NavigateTo("/articles");
        } else
        {
            SetErrorMessage(result.Error);
        }
    }

    void SetErrorMessage(string? error)
    {
        errorMessage = error ?? string.Empty;
    }
}
