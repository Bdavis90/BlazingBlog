@page "/login"
@using BlazingBlogApplication.Users.LoginUser
@inject ISender Sender
@inject NavigationManager NavigationManager

<PageTitle>Register</PageTitle>
<div class="space-y-6">
    <h2 class="text-3xl font-extrabold text-gray-50">Register</h2>

    <EditForm FormName="LoginUserForm" Model="UserModel" OnValidSubmit="HandleSubmit" class="space-y-6 my-4">
        <DataAnnotationsValidator />
        @* <ValidationSummary /> *@
        <div>
            <label for="name" class="text-sm">UserName</label>
            <InputText id="name" class="w-full p-3 rounded bg-gray-800 border-gray-400 border-1 shadow" @bind-Value="UserModel.UserName"></InputText>
            <ValidationMessage For="() => UserModel.UserName" class="text-danger" />
        </div>

        <div>
            <label for="password" class="text-sm">Password</label>
            <InputText id="password" type="password" class="w-full p-3 rounded bg-gray-800 border-gray-400 border-1 shadow" @bind-Value="UserModel.Password"></InputText>
            <ValidationMessage For="() => UserModel.Password" class="text-danger" />
        </div>

        <button class="w-full p-3 text-sm font-bold uppercase rounded bg-blue-400 text-gray-900" type="submit">Submit</button>
    </EditForm>

    <span class="text-danger">@_errorMessage</span>
</div>

@code {
    [SupplyParameterFromForm]
    public LoginUserModel UserModel { get; set; } = new();
    private string _errorMessage = string.Empty;

    private async Task HandleSubmit()
    {
        var command = new LoginUserCommand
            {
                Password = UserModel.Password,
                UserName = UserModel.UserName
            };

        var result = await Sender.Send(command);

        if(result.Success)
        {
            NavigationManager.NavigateTo("/");
        } else
        {
            _errorMessage = result.Error ?? "Login Failed.";
        }
    }
}
